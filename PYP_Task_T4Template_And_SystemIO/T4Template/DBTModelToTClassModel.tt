<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>

<#@ include file="Column.tt"#>
<#@ include file="Table.tt"#>

<#   

        string connectionString = "Server=TABRIZ\\SQLEXPRESS;Database=NORTHWND;Trusted_Connection=True;MultipleActiveResultSets=true";
        string folderPath = @"C:\Users\tabri\OneDrive\Desktop\PYP_Task_T4Template_And_SystemIO\PYP_Task_T4Template_And_SystemIO\Model";

        List<Table> tables = GetTables(connectionString);
        foreach (Table table in tables)
        {
            table.Columns = GetColumns(connectionString, table.Name);
        }

        if (!Directory.Exists(folderPath))
        {
            Directory.CreateDirectory(folderPath);
        }

        foreach (Table table in tables)
        {   
            string filePath = Path.Combine(folderPath, table.Name + ".cs");
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                writer.WriteLine("namespace Northwind.Models");
                writer.WriteLine("{");
                writer.WriteLine("    public class " + table.Name);
                writer.WriteLine("    {");

                foreach (Column column in table.Columns)
                {
                    writer.WriteLine("        public " + MssqlTypeToCSharpType(column.Type) + " " + column.Name + " { get; set; }");
                }

                writer.WriteLine("    }");
                writer.WriteLine("}");
            }
        }

    static List<Table> GetTables(string connectionString)
    {
        List<Table> tables = new List<Table>();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            using (SqlCommand command = new SqlCommand("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE'", connection))
            {
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        tables.Add(new Table { Name = reader.GetString(0) });
                    }
                }
            }
        }

        return tables;
    }

    static List<Column> GetColumns(string connectionString, string tableName)
    {
        List<Column> columns = new List<Column>();

        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            using (SqlCommand command = new SqlCommand("SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE, COLUMNPROPERTY(OBJECT_ID(TABLE_SCHEMA + '.' + TABLE_NAME), COLUMN_NAME, 'IsIdentity') AS IsIdentity FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = @tableName", connection))
            {
                command.Parameters.AddWithValue("@tableName", tableName);
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        columns.Add(new Column
                        {
                            Name = reader.GetString(0),
                            Type = reader.GetString(1),
                            IsNullable = reader.GetString(2) == "YES",
                            IsPrimaryKey = reader.GetInt32(3) == 1
                        });
                    }
                }
            }
        }

        return columns;
    }

   static string MssqlTypeToCSharpType(string type)
    {
        switch (type)
        {
            case "bigint":
                return "long";
            case "binary":
                return "byte[]";
            case "bit":
                return "bool";
            case "char":
                return "string";
            case "date":
                return "DateTime";
            case "datetime":
                return "DateTime";
            case "datetime2":
                return "DateTime";
            case "datetimeoffset":
                return "DateTimeOffset";
            case "decimal":
                return "decimal";
            case "float":
                return "double";
            case "image":
                return "byte[]";
            case "int":
                return "int";
            case "money":
                return "decimal";
            case "nchar":
                return "string";
            case "ntext":
                return "string";
            case "numeric":
                return "decimal";
            case "nvarchar":
                return "string";
            case "real":
                return "float";
            case "smalldatetime":
                return "DateTime";
            case "smallint":
                return "short";
            case "smallmoney":
                return "decimal";
            case "text":
                return "string";
            case "time":
                return "TimeSpan";
            case "timestamp":
                return "byte[]";
            case "tinyint":
                return "byte";
            case "uniqueidentifier":
                return "Guid";
            case "varbinary":
                return "byte[]";
            case "varchar":
                return "string";
            case "xml":
                return "string";
            default:
                return "string";
        }
    }

#>